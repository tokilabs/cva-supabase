"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionResolverBase = void 0;
/*
------------------------------------------------------------------------------
This code was generated by Amplication.
 
Changes to this file will be lost if the code is regenerated.

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
const graphql = __importStar(require("@nestjs/graphql"));
const apollo = __importStar(require("apollo-server-express"));
const prisma_util_1 = require("../../src/prisma.util");
const MetaQueryPayload_1 = require("../../src/util/MetaQueryPayload");
const nestAccessControl = __importStar(require("nest-access-control"));
const public_decorator_1 = require("../../src/decorators/public.decorator");
const CreateSubscriptionArgs_1 = require("./CreateSubscriptionArgs");
const UpdateSubscriptionArgs_1 = require("./UpdateSubscriptionArgs");
const DeleteSubscriptionArgs_1 = require("./DeleteSubscriptionArgs");
const SubscriptionCountArgs_1 = require("./SubscriptionCountArgs");
const SubscriptionFindManyArgs_1 = require("./SubscriptionFindManyArgs");
const SubscriptionFindUniqueArgs_1 = require("./SubscriptionFindUniqueArgs");
const Subscription_1 = require("./Subscription");
const Subscription_service_1 = require("../Subscription.service");
const error_1 = __importDefault(require("next/error"));
let SubscriptionResolverBase = class SubscriptionResolverBase {
    constructor(service, rolesBuilder) {
        this.service = service;
        this.rolesBuilder = rolesBuilder;
    }
    _subscriptionsMeta(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.service.count(args);
            return {
                count: result,
            };
        });
    }
    subscriptions(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.findMany(args);
        });
    }
    subscription(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.service.findOne(args);
            if (result === null) {
                return null;
            }
            return result;
        });
    }
    createSubscription(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.service.create(Object.assign(Object.assign({}, args), { data: args.data }));
        });
    }
    updateSubscription(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const error = new error_1.default();
            try {
                return yield this.service.update(Object.assign(Object.assign({}, args), { data: args.data }));
            }
            catch (error) {
                if ((0, prisma_util_1.isRecordNotFoundError)(error)) {
                    throw new apollo.ApolloError(`No resource was found for ${JSON.stringify(args.where)}`);
                }
                throw error;
            }
        });
    }
    deleteSubscription(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.service.delete(args);
            }
            catch (error) {
                if ((0, prisma_util_1.isRecordNotFoundError)(error)) {
                    throw new apollo.ApolloError(`No resource was found for ${JSON.stringify(args.where)}`);
                }
                throw error;
            }
        });
    }
};
__decorate([
    graphql.Query(() => MetaQueryPayload_1.MetaQueryPayload),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "read",
        possession: "any",
    }),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionCountArgs_1.SubscriptionCountArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "_subscriptionsMeta", null);
__decorate([
    graphql.Query(() => [Subscription_1.Subscription]),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "read",
        possession: "any",
    }),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionFindManyArgs_1.SubscriptionFindManyArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "subscriptions", null);
__decorate([
    graphql.Query(() => Subscription_1.Subscription, { nullable: true }),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "read",
        possession: "own",
    }),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionFindUniqueArgs_1.SubscriptionFindUniqueArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "subscription", null);
__decorate([
    (0, public_decorator_1.Public)(),
    graphql.Mutation(() => Subscription_1.Subscription),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CreateSubscriptionArgs_1.CreateSubscriptionArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "createSubscription", null);
__decorate([
    graphql.Mutation(() => Subscription_1.Subscription),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "update",
        possession: "any",
    }),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [UpdateSubscriptionArgs_1.UpdateSubscriptionArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "updateSubscription", null);
__decorate([
    graphql.Mutation(() => Subscription_1.Subscription),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "delete",
        possession: "any",
    }),
    __param(0, graphql.Args()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [DeleteSubscriptionArgs_1.DeleteSubscriptionArgs]),
    __metadata("design:returntype", Promise)
], SubscriptionResolverBase.prototype, "deleteSubscription", null);
SubscriptionResolverBase = __decorate([
    graphql.Resolver(() => Subscription_1.Subscription),
    __metadata("design:paramtypes", [Subscription_service_1.SubscriptionService, nestAccessControl.RolesBuilder])
], SubscriptionResolverBase);
exports.SubscriptionResolverBase = SubscriptionResolverBase;
