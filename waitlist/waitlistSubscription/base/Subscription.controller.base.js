"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionControllerBase = void 0;
/*
------------------------------------------------------------------------------
This code was generated by Amplication.
 
Changes to this file will be lost if the code is regenerated.

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
const common = __importStar(require("@nestjs/common"));
const swagger = __importStar(require("@nestjs/swagger"));
const prisma_util_1 = require("../../src/prisma.util");
const errors = __importStar(require("../../src/errors"));
const class_transformer_1 = require("class-transformer");
const api_nested_query_decorator_1 = require("../../src/decorators/api-nested-query.decorator");
const nestAccessControl = __importStar(require("nest-access-control"));
const defaultAuthGuard = __importStar(require("../../auth/defaultAuth.guard"));
const subscription_service_1 = require("../subscription.service");
const public_decorator_1 = require("../../src/decorators/public.decorator");
const aclFilterResponse_interceptor_1 = require("../../interceptors/aclFilterResponse.interceptor");
const aclValidateRequest_interceptor_1 = require("../../interceptors/aclValidateRequest.interceptor");
const SubscriptionCreateInput_1 = require("./SubscriptionCreateInput");
const SubscriptionWhereUniqueInput_1 = require("./SubscriptionWhereUniqueInput");
const SubscriptionFindManyArgs_1 = require("./SubscriptionFindManyArgs");
const SubscriptionUpdateInput_1 = require("./SubscriptionUpdateInput");
const Subscription_1 = require("./Subscription");
let SubscriptionControllerBase = class SubscriptionControllerBase {
    constructor(service, rolesBuilder) {
        this.service = service;
        this.rolesBuilder = rolesBuilder;
    }
    create(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.service.create({
                data: data,
                select: {
                    createdAt: true,
                    email: true,
                    id: true,
                    updatedAt: true,
                },
            });
        });
    }
    findMany(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = (0, class_transformer_1.plainToClass)(SubscriptionFindManyArgs_1.SubscriptionFindManyArgs, request.query);
            return this.service.findMany(Object.assign(Object.assign({}, args), { select: {
                    createdAt: true,
                    email: true,
                    id: true,
                    updatedAt: true,
                } }));
        });
    }
    findOne(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.service.findOne({
                where: params,
                select: {
                    createdAt: true,
                    email: true,
                    id: true,
                    updatedAt: true,
                },
            });
            if (result === null) {
                throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
            }
            return result;
        });
    }
    update(params, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.service.update({
                    where: params,
                    data: data,
                    select: {
                        createdAt: true,
                        email: true,
                        id: true,
                        updatedAt: true,
                    },
                });
            }
            catch (error) {
                if ((0, prisma_util_1.isRecordNotFoundError)(error)) {
                    throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
                }
                throw error;
            }
        });
    }
    delete(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.service.delete({
                    where: params,
                    select: {
                        createdAt: true,
                        email: true,
                        id: true,
                        updatedAt: true,
                    },
                });
            }
            catch (error) {
                if ((0, prisma_util_1.isRecordNotFoundError)(error)) {
                    throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
                }
                throw error;
            }
        });
    }
};
__decorate([
    (0, public_decorator_1.Public)(),
    common.Post(),
    swagger.ApiCreatedResponse({ type: Subscription_1.Subscription }),
    swagger.ApiForbiddenResponse({
        type: errors.ForbiddenException,
    }),
    __param(0, common.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionCreateInput_1.SubscriptionCreateInput]),
    __metadata("design:returntype", Promise)
], SubscriptionControllerBase.prototype, "create", null);
__decorate([
    common.UseInterceptors(aclFilterResponse_interceptor_1.AclFilterResponseInterceptor),
    common.Get(),
    swagger.ApiOkResponse({ type: [Subscription_1.Subscription] }),
    (0, api_nested_query_decorator_1.ApiNestedQuery)(SubscriptionFindManyArgs_1.SubscriptionFindManyArgs),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "read",
        possession: "any",
    }),
    swagger.ApiForbiddenResponse({
        type: errors.ForbiddenException,
    }),
    __param(0, common.Req()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], SubscriptionControllerBase.prototype, "findMany", null);
__decorate([
    common.UseInterceptors(aclFilterResponse_interceptor_1.AclFilterResponseInterceptor),
    common.Get("/:id"),
    swagger.ApiOkResponse({ type: Subscription_1.Subscription }),
    swagger.ApiNotFoundResponse({ type: errors.NotFoundException }),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "read",
        possession: "own",
    }),
    swagger.ApiForbiddenResponse({
        type: errors.ForbiddenException,
    }),
    __param(0, common.Param()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionWhereUniqueInput_1.SubscriptionWhereUniqueInput]),
    __metadata("design:returntype", Promise)
], SubscriptionControllerBase.prototype, "findOne", null);
__decorate([
    common.UseInterceptors(aclValidateRequest_interceptor_1.AclValidateRequestInterceptor),
    common.Patch("/:id"),
    swagger.ApiOkResponse({ type: Subscription_1.Subscription }),
    swagger.ApiNotFoundResponse({ type: errors.NotFoundException }),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "update",
        possession: "any",
    }),
    swagger.ApiForbiddenResponse({
        type: errors.ForbiddenException,
    }),
    __param(0, common.Param()),
    __param(1, common.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionWhereUniqueInput_1.SubscriptionWhereUniqueInput,
        SubscriptionUpdateInput_1.SubscriptionUpdateInput]),
    __metadata("design:returntype", Promise)
], SubscriptionControllerBase.prototype, "update", null);
__decorate([
    common.Delete("/:id"),
    swagger.ApiOkResponse({ type: Subscription_1.Subscription }),
    swagger.ApiNotFoundResponse({ type: errors.NotFoundException }),
    nestAccessControl.UseRoles({
        resource: "Subscription",
        action: "delete",
        possession: "any",
    }),
    swagger.ApiForbiddenResponse({
        type: errors.ForbiddenException,
    }),
    __param(0, common.Param()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [SubscriptionWhereUniqueInput_1.SubscriptionWhereUniqueInput]),
    __metadata("design:returntype", Promise)
], SubscriptionControllerBase.prototype, "delete", null);
SubscriptionControllerBase = __decorate([
    swagger.ApiBearerAuth(),
    common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard),
    __metadata("design:paramtypes", [subscription_service_1.SubscriptionService, nestAccessControl.RolesBuilder])
], SubscriptionControllerBase);
exports.SubscriptionControllerBase = SubscriptionControllerBase;
