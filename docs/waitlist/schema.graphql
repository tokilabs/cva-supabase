# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateSubscription(
    data: SubscriptionUpdateInput!
    where: SubscriptionWhereUniqueInput!
  ): Subscription!
}

type Query {
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  _subscriptionsMeta(where: SubscriptionWhereInput): MetaQueryPayload!
  me: User!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float
    where: UserWhereInput
  ): [User!]!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptions(
    orderBy: [SubscriptionOrderByInput!]
    skip: Float
    take: Float
    where: SubscriptionWhereInput
  ): [Subscription!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}

type Subscription {
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
}

input SubscriptionCreateInput {
  email: String!
}

input SubscriptionOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input SubscriptionUpdateInput {
  email: String
}

input SubscriptionWhereInput {
  id: StringFilter
}

input SubscriptionWhereUniqueInput {
  id: String!
}
